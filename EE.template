AWSTemplateFormatVersion: 2010-09-09
Description: 'This AWS CloudFormation stack '
Mappings:
  Constants:
    AMI:
      DefaultAMIId: ami-0eb1f21bbd66347fe
    Tags:
      environment: test-env
Parameters:
  BastianHostInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    Description: Enter the instance type for the bastian host. Default is t2.micro.
  ApplicationServerInstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m4.large
      - m4.xlarge
    Description: Enter the instance type for the application server. Default is t2.medium.
  AvailabilityZone1:
    Description: The first availability zones where the resources will be initiated
    Type: 'AWS::EC2::AvailabilityZone::Name'
    ConstraintDescription: ap-southeast-1
  AvailabilityZone2:
    Description: The second availability zones where the resources will be initiated
    Type: 'AWS::EC2::AvailabilityZone::Name'
    ConstraintDescription: ap-southeast-2
  Environment:
    Description: Environment
    Type: String
    ConstraintDescription: Must be a valid string.
  PEMFileName:
    Description: Enter the PEM file name
    Type: String
    Default: YOUR-KEY-NAME
    ConstraintDescription: Must be a valid string.
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.20.0.0/16
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-VPC'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.10.0/24
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-PublicSubnet1'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.10.0/24
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-PublicSubnet2'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-InternetGateway'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-PublicRouteTable'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetPublicRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  SubnetPublicRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  BastianHostSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for a bastian host. Only port 22 is allowed
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-BastianHostSecurityGroup'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  BastianHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
      ImageId: !FindInMap 
        - Constants
        - AMI
        - DefaultAMIId
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref BastianHostSecurityGroup
          SubnetId: !Ref PublicSubnet1
      InstanceType: !Ref BastianHostInstanceType
      KeyName: !Ref PEMFileName
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-BastianHost'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.20.0/24
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-PrivateSubnet1'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.20.0/24
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-PrivateSubnet2'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPC
  NATGateway:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-NATGateway'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-PrivateRouteTable'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  SubnetPrivateRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  SubnetPrivateRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  AppServerInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for a instance which client application is running
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.10.0.0/16
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-AppServerInstanceSecurityGroup'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  AppServerInstance1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          jenkins_install:
            - setup_jenkins
        setup_jenkins:
          packages:
            yum:
              tmux: []
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
          files:
            /tmp/backup.txt:
              content: !Sub |
                */5 * * * * aws s3 sync /var/jenkins_home > s3://${BucketName}
              mode: '000644'
              owner: root
              group: root
          commands:
            01_install_docker:
              command: yum install -y docker
            02_make_jenkins_dir:
              command: mkdir /var/jenkins_home
            03_chown_jenkins:
              command: 'chown 1000:1000 /var/jenkins_home'
            04_config_docker:
              command: usermod -a -G docker ec2-user
            05_start_docker:
              command: service docker start
            06_start_jenkins:
              command: >-
                docker run -t -d -v /var/jenkins_home:/var/jenkins_home:z -p
                80:8080 --name my-jenkins --restart=always
                denny/jenkins_image:latest
              test: docker ps -a | grep -v jenkins
            07_backup_jenkins:
              command: crontab /tmp/backup.txt
              test: crontab -l
      'AWS::CloudFormation::Designer':
        id: 5ef9ebcc-fe03-4d98-ab13-cbe13f3f24d8
    Properties:
      Tags:
        - Key: stack
          Value: !Ref Environment
        - Key: app
          Value: jenkins
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref Urlname
              - !Ref Environment
              - jenkins
      SubnetId:
        'Fn::ImportValue': !Join 
          - '-'
          - - !Ref Environment
            - PrivateAz1Subnet
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroupIds:
        - 'Fn::ImportValue': !Join 
            - '-'
            - - !Ref Environment
              - JenkinsSG
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - ''
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource Jenkins '
            - '         --configsets jenkins_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - ''
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '80'
            VolumeType: gp2
      ImageId: !FindInMap 
        - Constants
        - AMI
        - DefaultAMIId
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: false
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref AppServerInstanceSecurityGroup
          SubnetId: !Ref PrivateSubnet1
      InstanceType: !Ref ApplicationServerInstanceType
      KeyName: !Ref PEMFileName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex
            - |
              apt-get update
            - |
              apt-get -y install python-setuptools
            - |
              mkdir aws-cfn-bootstrap-latest
            - >
              curl
              https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
              | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
            - |
              easy_install aws-cfn-bootstrap-latest
            - |
              # Install the files and packages from the metadata
            - '/usr/local/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource AppServerInstance1 '
            - '         --configsets InstallAndRun '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-AppServerInstance1'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  AppServerInstance2:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
        Install:
          commands:
            command01:
              command: sudo apt-get update
            command02:
              command: sudo apt-get -y install apache2
            command03:
              command: sudo chmod 777 /var/www/html/index.html
            command04:
              command: >-
                sudo echo "<html><body><center><h1>Hello This is an
                cloudformation launch 2</h1></center></body></html>" >
                /var/www/html/index.html
            command05:
              command: sudo /etc/init.d/apache2 restart
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '80'
            VolumeType: gp2
      ImageId: !FindInMap 
        - Constants
        - AMI
        - DefaultAMIId
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: false
          DeleteOnTermination: 'true'
          GroupSet:
            - !Ref AppServerInstanceSecurityGroup
          SubnetId: !Ref PrivateSubnet2
      InstanceType: !Ref ApplicationServerInstanceType
      KeyName: !Ref PEMFileName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex
            - |
              apt-get update
            - |
              apt-get -y install python-setuptools
            - |
              mkdir aws-cfn-bootstrap-latest
            - >
              curl
              https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
              | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
            - |
              easy_install aws-cfn-bootstrap-latest
            - |
              # Install the files and packages from the metadata
            - '/usr/local/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource AppServerInstance2 '
            - '         --configsets InstallAndRun '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-AppServerInstance2'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  PublicLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Internet facing LoadBalancer security group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-PublicLoadBalancerSecurityGroup'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  PublicLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '50'
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-PublicLoadBalancer'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
  HTTP80Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppServerTargetGroup
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: '80'
      Protocol: HTTP
  AppServerListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AppServerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref HTTP80Listener
      Priority: 1
  AppServerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: AppServerTargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref AppServerInstance1
          Port: 80
        - Id: !Ref AppServerInstance2
          Port: 80
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref Environment
              - '-AppServerTargetGroup'
        - Key: Environment
          Value: !FindInMap 
            - Constants
            - Tags
            - environment
Outputs:
  BastianInstancePublicIP:
    Value: !GetAtt 
      - BastianHost
      - PublicIp
    Description: Public IP of the Bastian Host
  AppServer1PrivateIp:
    Value: !GetAtt 
      - AppServerInstance1
      - PrivateIp
    Description: PrivateIp of the AppServerInstance1
  AppServer2PrivateIp:
    Value: !GetAtt 
      - AppServerInstance2
      - PrivateIp
    Description: PrivateIp of the AppServerInstance2
  PublicLoadBalancerDNSName:
    Value: !GetAtt 
      - PublicLoadBalancer
      - DNSName
    Description: DNSName of the Public Load Balancer
